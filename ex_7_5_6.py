# Большой подвиг 6. (Для закрепления предыдущего материала). Вводится таблица целых чисел (см. пример ниже) размером
# N x N элементов (N определяется по входным данным).
# Эта таблица содержит нули, но кое-где - единицы.
# С помощью функции с именем verify, на вход которой передается двумерный список чисел, необходимо проверить,
# являются ли единицы изолированными друг от друга, то есть, вокруг каждой единицы должны быть нули.
#
# Рекомендуется следующий алгоритм. В функции verify производить перебор двумерного списка.
# Для каждого элемента (списка) со значением 1 вызывать еще одну вспомогательную функцию is_isolate для проверки
# изолированности единицы. То есть, функция is_isolate должна возвращать True, если единица изолирована и False -
# в противном случае.

# Как только встречается не изолированная единица, функция verify должна возвращать False.
# Если успешно доходим (по элементам списка) до конца, то возвращается значение True.
#
# Функцию выполнять не нужно, только определить.
#
# P.S. При реализации функции is_isolate не следует прописывать восемь операторов if.
# Подумайте, как это можно сделать красивее (с точки зрения реализации алгоритма).
#
# Sample Input:
#
# 1 0 0 0 0
# 0 0 1 0 0
# 0 0 0 0 0
# 0 1 0 1 0
# 0 0 0 0 0
# Sample Output:
#
# True


def is_isolate(matrix, x, y):  # проверить на изолированность единички
    n = len(matrix)
    for i in range(-1, 2):
        for j in range(-1, 2):
            if 0 <= x + i < n and 0 <= y + j < n:
                if (i or j) and matrix[x+i][y+j]:
                    return False
    return True


def verify(matrix):  # искать единичку в матрице из нулей
    N = len(matrix)
    for i in range(N):
        for j in range(N):
            if matrix[i][j] == 1 and not is_isolate(matrix, i, j):
                return False
    return True
